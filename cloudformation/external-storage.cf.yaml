AWSTemplateFormatVersion: '2010-09-09'
Description: "Reference: https://docs.databricks.com/ja/connect/unity-catalog/storage-credentials.html"

Parameters:
  DatabricksAccountId:
    Type: String
    Description: Enter the Databricks Account ID that you copied from the Databricks Account Console.

  S3BucketName:
    Type: String
    Description: Enter the name of the S3 bucket you wanted manage by Databricks

  IamRoleName:
    Type: String
    Default: dbx-iamrole-storage-external

  IsFirstStep:
    Type: String
    Default: "True"
    AllowedValues: ["True", "False"]
    Description: IAM Role ARN for self-assume.

Conditions:
    IsFirstStep: !Equals ["True", !Ref IsFirstStep]

Resources:
  # ワークスペース用 S3 バケットに対する Databricks からのアクセスを許可 (IAM Role)
  IamRoleDatabricksToS3Bucket:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Ref IamRoleName
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS:
                - arn:aws:iam::414351767826:role/unity-catalog-prod-UCMasterRole-14S5ZJVKOTYTL
                # このスタックはデプロイ後に再度スタック更新を行う。生成するIAM ロールの ARN を
                # 初回デプロイの段階で確定させ、スタック更新の段階で確定した ARN で自己仮定させる
                - !If [IsFirstStep, !Ref AWS::NoValue, !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/${IamRoleName}"]
            Action: sts:AssumeRole
            Condition:
              StringEquals: { sts:ExternalId: !Ref DatabricksAccountId }

  IamPolicyDatabricksToS3Bucket:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: InlinePolicy
      Roles: [!Ref IamRoleDatabricksToS3Bucket]
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - s3:GetObject
              - s3:PutObject
              - s3:DeleteObject
              - s3:ListBucket
              - s3:GetBucketLocation
            Resource:
              - !Sub arn:${AWS::Partition}:s3:::${S3BucketName}
              - !Sub arn:${AWS::Partition}:s3:::${S3BucketName}/*
          # - Effect: Allow
          #   Action:
          #     - kms:Decrypt
          #     - kms:Encrypt
          #     - kms:GenerateDataKey*
          #   Resource: arn:aws:kms:<KMS-KEY>
          - Effect: Allow
            Action: sts:AssumeRole
            Resource: !GetAtt IamRoleDatabricksToS3Bucket.Arn
          - Sid: ManagedFileEventsSetupStatement
            Effect: Allow
            Action:
              - s3:GetBucketNotification
              - s3:PutBucketNotification
              - sns:ListSubscriptionsByTopic
              - sns:GetTopicAttributes
              - sns:SetTopicAttributes
              - sns:CreateTopic
              - sns:TagResource
              - sns:Publish
              - sns:Subscribe
              - sqs:CreateQueue
              - sqs:DeleteMessage
              - sqs:ReceiveMessage
              - sqs:SendMessage
              - sqs:GetQueueUrl
              - sqs:GetQueueAttributes
              - sqs:SetQueueAttributes
              - sqs:TagQueue
              - sqs:ChangeMessageVisibility
            Resource:
              - !Sub arn:${AWS::Partition}:s3:::${S3BucketName}
              - arn:aws:sqs:*:*:*
              - arn:aws:sns:*:*:*
          - Sid: ManagedFileEventsListStatement
            Effect: Allow
            Action:
              - sqs:ListQueues
              - sqs:ListQueueTags
              - sns:ListTopics
            Resource: "*"
          - Sid: ManagedFileEventsTeardownStatement
            Effect: Allow
            Action:
              - sns:Unsubscribe
              - sns:DeleteTopic
              - sqs:DeleteQueue
            Resource:
              - arn:aws:sqs:*:*:*
              - arn:aws:sns:*:*:*

Outputs:
  S3BucketName:
    Value: !Ref S3BucketName
    Description: S3 BucketName for Storage Configuration entry on Databricks Account Console.

  IamRoleArn:
    Value: !GetAtt IamRoleDatabricksToS3Bucket.Arn
    Description: IAM Role for Storage Configuration entry on Databricks Account Console.