AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  VpcSubnetAzASide:
    Type: AWS::EC2::AvailabilityZone::Name

  VpcSubnetAzBSide:
    Type: AWS::EC2::AvailabilityZone::Name

  DatabricksSccEndpointServiceName:
    Type: String
    Default: com.amazonaws.vpce.ap-northeast-1.vpce-svc-02aa633bda3edbec0

  DatabricksRestEndpointServiceName:
    Type: String
    Default: com.amazonaws.vpce.ap-northeast-1.vpce-svc-02691fd610d24fd64

Resources:
  # ----------------------------------------
  # VPC
  # Reference: https://docs.databricks.com/ja/security/network/classic/customer-managed-vpc.html
  # ----------------------------------------
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - { Key: Name, Value: dbx-workspace-vpc }

  # ----------------------------------------
  # VPC Subnet 1 Public
  # ----------------------------------------
  VpcSubnet1Public:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref VpcSubnetAzASide
      CidrBlock: 10.0.0.0/20
      VpcId: !Ref Vpc
      Tags:
        - { Key: Name, Value: dbx-subnet-workspace-a-public }

  VpcSubnet1PublicRouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref VpcSubnet1Public
      RouteTableId: !Ref VpcRouteTablePublic

  # ----------------------------------------
  # VPC Subnet 2 Cluster
  # ----------------------------------------
  VpcSubnet2Cluster:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref VpcSubnetAzASide
      CidrBlock: 10.0.16.0/20
      VpcId: !Ref Vpc
      Tags:
        - {
            Key: Name,
            Value: !Sub "dbx-subnet-workspace-a-cluster",
          }

  VpcSubnet2ClusterRouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref VpcSubnet2Cluster
      RouteTableId: !Ref VpcRouteTableCluster

  # ----------------------------------------
  # VPC Subnet 3 Cluster
  # ----------------------------------------
  VpcSubnet3Cluster:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref VpcSubnetAzBSide
      CidrBlock: 10.0.32.0/20
      VpcId: !Ref Vpc
      Tags:
        - {
            Key: Name,
            Value: !Sub "dbx-subnet-workspace-b-cluster",
          }

  VpcSubnet3ClusterRouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref VpcSubnet3Cluster
      RouteTableId: !Ref VpcRouteTableCluster

  # ----------------------------------------
  # VPC Subnet 4 Private
  # ----------------------------------------
  VpcSubnet4Private:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref VpcSubnetAzBSide
      CidrBlock: 10.0.48.0/20
      VpcId: !Ref Vpc
      Tags:
        - { Key: Name, Value: dbx-subnet-workspace-b-private }

  # ----------------------------------------
  # VPC Routing
  # ----------------------------------------
  VpcRouteTablePublic:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - { Key: Name, Value: "dbx-rtb-public" }

  VpcRouteTablePublicEntryInternetGw:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref VpcRouteTablePublic
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGw

  VpcRouteTableCluster:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - { Key: Name, Value: "dbx-rtb-cluster" }

  VpcRouteTableClusterEntryNatGw:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref VpcRouteTableCluster
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGW

  # ----------------------------------------
  # VPC Security Group
  # ----------------------------------------
  VpcSecurityGroupPublic:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "dbx-sg-public"
      GroupDescription: databricks public
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - { IpProtocol: tcp, FromPort: 22, ToPort: 22, CidrIp: 0.0.0.0/0 }
      Tags:
        - { Key: Name, Value: dbx-sg-public }

  VpcSecurityGroupFront:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "dbx-sg-front"
      GroupDescription: databricks frontend
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - { IpProtocol: tcp, FromPort: 443, ToPort: 443, CidrIp: 0.0.0.0/0 }
      Tags:
        - { Key: Name, Value: dbx-sg-front }

  VpcSecurityGroupCluster:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "dbx-sg-cluster"
      GroupDescription: databricks private nodes
      VpcId: !Ref Vpc
      SecurityGroupEgress:
        - { IpProtocol: tcp, FromPort: 443, ToPort: 443, CidrIp: 0.0.0.0/0 }
        - { IpProtocol: tcp, FromPort: 3306, ToPort: 3306, CidrIp: 0.0.0.0/0 }
        - { IpProtocol: tcp, FromPort: 6666, ToPort: 6666, CidrIp: 0.0.0.0/0 }
        - { IpProtocol: tcp, FromPort: 2443, ToPort: 2443, CidrIp: 0.0.0.0/0 }
        - { IpProtocol: tcp, FromPort: 8443, ToPort: 8451, CidrIp: 0.0.0.0/0 }
      Tags:
        - { Key: Name, Value: dbx-sg-cluster }

  VpcSecurityGroupClusterIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: -1
      GroupId: !Ref VpcSecurityGroupCluster
      SourceSecurityGroupId: !Ref VpcSecurityGroupCluster

  VpcSecurityGroupClusterEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      IpProtocol: -1
      GroupId: !Ref VpcSecurityGroupCluster
      DestinationSecurityGroupId: !Ref VpcSecurityGroupCluster

  VpcSecurityGroupEndpoint:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "dbx-sg-endpoint"
      GroupDescription: databricks private nodes
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId: !Ref VpcSecurityGroupCluster
        - IpProtocol: tcp
          FromPort: 6666
          ToPort: 6666
          SourceSecurityGroupId: !Ref VpcSecurityGroupCluster
        - IpProtocol: tcp
          FromPort: 2443
          ToPort: 2443
          SourceSecurityGroupId: !Ref VpcSecurityGroupCluster
        # ドキュメント的にクラスターからエンドポイント向けには不要。ここでは Kafka Cluster 用に作成
        - IpProtocol: -1
          SourceSecurityGroupId: !Ref VpcSecurityGroupCluster
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          DestinationSecurityGroupId: !Ref VpcSecurityGroupCluster
        - IpProtocol: tcp
          FromPort: 6666
          ToPort: 6666
          DestinationSecurityGroupId: !Ref VpcSecurityGroupCluster
        - IpProtocol: tcp
          FromPort: 2443
          ToPort: 2443
          DestinationSecurityGroupId: !Ref VpcSecurityGroupCluster
      Tags:
        - { Key: Name, Value: dbx-sg-endpoint }

  VpcSecurityGroupEndpointIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: -1
      GroupId: !Ref VpcSecurityGroupEndpoint
      SourceSecurityGroupId: !Ref VpcSecurityGroupEndpoint

  VpcSecurityGroupEndpointEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      IpProtocol: -1
      GroupId: !Ref VpcSecurityGroupEndpoint
      DestinationSecurityGroupId: !Ref VpcSecurityGroupEndpoint

  # ----------------------------------------
  # VPC Resources
  # ----------------------------------------
  NatGW:
    Type: AWS::EC2::NatGateway
    Properties:
      SubnetId: !Ref VpcSubnet1Public
      AllocationId: !GetAtt NatGwEip.AllocationId
      Tags:
        - { Key: Name, Value: dbx-natgw }

  NatGwEip:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - { Key: Name, Value: dbx-natgw-eip }

  InternetGw:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - { Key: Name, Value: dbx-igw }

  InternetGwAttach:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref Vpc
      InternetGatewayId: !Ref InternetGw

  # ----------------------------------------
  # VPC Resources (無くても良いが推奨)
  # ----------------------------------------
  S3Endpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub com.amazonaws.${AWS::Region}.s3
      VpcEndpointType: Gateway
      VpcId: !Ref Vpc
      RouteTableIds: [!Ref VpcRouteTableCluster]
      Tags:
        - { Key: Name, Value: dbx-vpce-s3 }

  StsEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub com.amazonaws.${AWS::Region}.sts
      VpcEndpointType: Interface
      VpcId: !Ref Vpc
      SubnetIds: [!Ref VpcSubnet4Private]
      SecurityGroupIds: [!Ref VpcSecurityGroupEndpoint]
      PrivateDnsEnabled: true
      Tags:
        - { Key: Name, Value: dbx-vpce-sts }

  KinesisEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub com.amazonaws.${AWS::Region}.kinesis-streams
      VpcEndpointType: Interface
      VpcId: !Ref Vpc
      SubnetIds: [!Ref VpcSubnet4Private]
      SecurityGroupIds: [!Ref VpcSecurityGroupEndpoint]
      PrivateDnsEnabled: true
      Tags:
        - { Key: Name, Value: dbx-vpce-kinesis }

  # ----------------------------------------
  # Control Plane PrivateLink
  # Reference: https://docs.databricks.com/ja/security/network/classic/privatelink.html
  # ----------------------------------------
  DatabricksFrontendEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Ref DatabricksRestEndpointServiceName
      VpcEndpointType: Interface
      VpcId: !Ref Vpc
      SubnetIds: [!Ref VpcSubnet1Public]
      SecurityGroupIds: [!Ref VpcSecurityGroupFront]
      PrivateDnsEnabled: false
      Tags:
        - { Key: Name, Value: dbx-vpce-databricks-front }

  DatabricksSccEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Ref DatabricksSccEndpointServiceName
      VpcEndpointType: Interface
      VpcId: !Ref Vpc
      SubnetIds: [!Ref VpcSubnet4Private]
      SecurityGroupIds: [!Ref VpcSecurityGroupEndpoint]
      PrivateDnsEnabled: true
      Tags:
        - { Key: Name, Value: dbx-vpce-databricks-scc }

  DatabricksInternalEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Ref DatabricksRestEndpointServiceName
      VpcEndpointType: Interface
      VpcId: !Ref Vpc
      SubnetIds: [!Ref VpcSubnet4Private]
      SecurityGroupIds: [!Ref VpcSecurityGroupEndpoint]
      PrivateDnsEnabled: true
      Tags:
        - { Key: Name, Value: dbx-vpce-databricks-internal }

Outputs:
  VpcId:
    Value: !Ref Vpc
    Description: VPC ID for Network Setting on Databricks Account Console.

  VpcName:
    Value: dbx-workspace-vpc
    Description: VPC Name for Network Setting on Databricks Account Console

  SubnetIdPublic:
    Value: !Ref VpcSubnet1Public
    Description: Subnet ID for Network Setting on Databricks Account Console.

  SubnetIdClusterA:
    Value: !Ref VpcSubnet2Cluster
    Description: Subnet ID for Network Setting on Databricks Account Console.

  SubnetIdClusterB:
    Value: !Ref VpcSubnet3Cluster
    Description: Subnet ID for Network Setting on Databricks Account Console.

  SubnetIdPrivate:
    Value: !Ref VpcSubnet4Private
    Description: Subnet ID for Network Setting on Databricks Account Console.

  SecurityGroupIdPublic:
    Value: !Ref VpcSecurityGroupPublic
    Description: SecurityGroup ID for Network Setting on Databricks Account Console.

  # SecurityGroupIdFront:
  #   Value: !Ref VpcSecurityGroupFront
  #   Description: SecurityGroup ID for Network Setting on Databricks Account Console.

  SecurityGroupIdCluster:
    Value: !Ref VpcSecurityGroupCluster
    Description: SecurityGroup ID for Network Setting on Databricks Account Console.

  SecurityGroupIdEndpoint:
    Value: !Ref VpcSecurityGroupEndpoint
    Description: SecurityGroup ID for Network Setting on Databricks Account Console.

  VPCEndpointIdScc:
    Value: !Ref DatabricksSccEndpoint
    Description: Scc Endpoint ID for VPC Endpoint on Databricks Account Console.

  VPCEndpointNameScc:
    Value: dbx-vpce-databricks-scc
    Description: Scc Endpoint Name for VPC Endpoint on Databricks Account Console.

  VPCEndpointIdInternal:
    Value: !Ref DatabricksInternalEndpoint
    Description: Workspace Endpoint ID for VPC Endpoint on Databricks Account Console.

  VPCEndpointNameInternal:
    Value: dbx-vpce-databricks-internal
    Description: Workspace Endpoint Name for VPC Endpoint on Databricks Account Console.

  VPCEndpointIdFrontend:
    Value: !Ref DatabricksFrontendEndpoint
    Description: Frontend Endpoint ID for VPC Endpoint on Databricks Account Console.

  VPCEndpointNameFrontend:
    Value: dbx-vpce-databricks-front
    Description: Frontend Endpoint Name for VPC Endpoint on Databricks Account Console.
